# workflow 이름 지정
name: CI/CD

# workflow trigger
on:
  pull_request:
    branches:
      - develop
    types:
      - closed

env:
  DOCKER_IMAGE_NAME: projectggb/back-end-dev:0.0.1
  DOCKER_CONTAINER_NAME: ggb-back

jobs:
  ci:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: development
    steps:
        # Runner 에 repository 에 저장된 코드 복사
      - name: Checkout code
        uses: actions/checkout@v2

        # SET UP JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

        # APPLICATION-SECRET.YML 등록
      - name: Create application-secret.yml
        run: |
          mkdir -p src/main/resources
          echo "${{secrets.SECRET_YML}}" | base64 --decode > src/main/resources/application-secret.yml

        # BUILD WITH GRADLE
      - name: Build with gradle
        run: ./gradlew clean build

        # DOCKER BUILDX 설정 - Docker 빌드 기능을 확장한 도구
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

        # DOCKERHUB LOGIN
      - name : Login to dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

        # DOCKERHUB IMAGE BUILD AND PUSH
      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{env.DOCKER_IMAGE_NAME}}
  cd:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: development
    needs: ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Copy files via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST}}
          username: ${{ secrets.EC2_USERNAME}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          script: |
            docker pull ${{env.DOCKER_IMAGE_NAME}}
            docker stop ${{env.DOCKER_CONTAINER_NAME}}
            docker rm ${{env.DOCKER_CONTAINER_NAME}}
            docker run -d --name ${{env.DOCKER_CONTAINER_NAME}} -p 8081:8080 ${{env.DOCKER_IMAGE_NAME}}
            docker image prune -af